pipeline {
    agent any

    environment {
        lambdaRole      = "lambda-ex"
        lambdaName      = "hello-world-python"
        lambdaFileName  = "lambda_function.py"
        lambdaHandler    = "lambda_function.lambda_handler"
        lambdaRuntime   = "python3.9"
        accountID       = "366423825935"
    }

    parameters {
         booleanParam defaultValue:false,name:'blCreateIAMRole'
         booleanParam defaultValue:false,name:'blCreateLambda'
         booleanParam defaultValue:false,name:'blTestLambda'
         booleanParam defaultValue:false,name:'blDeleteLambda'

    }       

    stages {
        stage('Create Role') {
            when { expression{ return params.blCreateIAMRole } }
            steps {
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    // Create Lambda role
                    dir('py'){
                        sh '''
                            aws iam create-role \
                            --role-name $lambdaRole \
                            --assume-role-policy-document file://trust-policy.json
                        '''
                            //  Attach AWSLambdaBasicExecutionRole policy to role
                            sh """
                            aws iam attach-role-policy \
                            --role-name ${lambdaRole} \
                            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                        """
                    }

                }
            }
        }
        stage('Wait Role Creation') {
            steps{
                echo "Waiting for ${lambdaRole} Creation"
                //The input can also be replaced by sleep
                /*script {
                    timeout(time: 20, unit: 'SECONDS') {
                            input "Should we continue to create lambda?"
                    }
                }*/
                sleep 15
            }
        }
        stage('Create Lambda') {
            when { expression{ return params.blCreateLambda } }
            steps{
                echo 'Create a deployment package && Create a Lambda function' 
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    dir('py'){
                        sh '''
                           zip function.zip $lambdaFileName
                           
                           aws lambda create-function --function-name $lambdaName \
                            --zip-file fileb://function.zip --handler $lambdaHandler --runtime $lambdaRuntime \
                            --role arn:aws:iam::$accountID:role/$lambdaRole
                        '''
                    }

                }
            }
        }
        stage('Test Lambda') {
            when { expression{ return params.blTestLambda } }
            steps{
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    echo 'List lambda functions'
                    sh 'aws lambda list-functions --max-items 10'
                    sh 'aws lambda get-function --function-name $lambdaName'

                    echo 'Invoke test'
                    sh 'aws lambda invoke --function-name $lambdaName out --log-type Tail'
                    sh '''
                        aws lambda invoke --function-name $lambdaName out --log-type Tail \
                        --query 'LogResult' --output text |  base64 -d
                    '''
                } 
            }
        }
        stage('Delete Resources'){
            when { expression{ return params.blDeleteLambda } }
            steps{
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    echo "Deleting lambda $lambdaName and role $lambdaRole"
                    sh 'aws lambda delete-function --function-name $lambdaName'
                    sh """
                        aws iam detach-role-policy \
                            --role-name ${lambdaRole} \
                            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                        aws iam delete-role --role-name ${lambdaRole}
                    """
                }
            }
        }
    }

    post {
        always {
            // One or more steps need to be included within each condition's block.
            cleanWs()
        }
    }
}
